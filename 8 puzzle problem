import heapq

goal = [[1,2,3],[4,5,6],[7,8,0]]

def manhattan(state):
    return sum(abs((val-1)//3 - i) + abs((val-1)%3 - j)
               for i, row in enumerate(state)
               for j, val in enumerate(row) if val != 0)

def neighbors(state):
    x, y = next((i, j) for i in range(3) for j in range(3) if state[i][j] == 0)
    for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [r[:] for r in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            yield new_state

def solve(start):
    heap = [(manhattan(start), 0, start, [])]
    seen = set()
    while heap:
        f, g, state, path = heapq.heappop(heap)
        key = tuple(tuple(row) for row in state)
        if key in seen: continue
        seen.add(key)
        if state == goal: return path + [state]
        for next_state in neighbors(state):
            heapq.heappush(heap, (g+1+manhattan(next_state), g+1, next_state, path + [state]))
    return None

def display(sol):
    if sol:
        for i, s in enumerate(sol):
            print(f"Step {i}:")
            for row in s: print(row)
            print()
    else:
        print("No solution found.")

start = [[1, 2, 3],
         [5, 0, 6],
         [4, 7, 8]]

display(solve(start))
